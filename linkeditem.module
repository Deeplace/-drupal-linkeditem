<?php

/*
 * Implementation of hook_elements(  )
*/
function linkeditem_elements() {
  $type['linked'] = array( 
       '#input' => TRUE,
       '#process' => array('linkeditem_expand'),
       '#default_value' => NULL,
       '#linked' => array(),
    );
  return $type;
}

/**
 * Our process callback to expand the table control.
 */
function linkeditem_expand($element) {
    $element['#tree'] = TRUE;
    foreach( element_children( $element ) as $key ){
        $element[$key]['#input'] = FALSE;
    }
    return $element;
}


/**
 * Implementation of hook_theme().
 * 
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function linkeditem_theme(){
  return array(
    'linked' => array(
      'arguments' => array('element'),
    ),
  );
}

function linkeditem_js_load(){
    $path = drupal_get_path( 'module', 'linkeditem' );
    drupal_add_js( $path . '/js/linkeditem.js' ); 
    drupal_add_css( $path . '/css/linkeditem.css'); 
}

function _drupal_force_child_render_cb(&$element, $parents, $name=NULL){
    if ( $name ){
        //Regenerate parents and name
        $parents[] = $name;
        $parents_copy = $parents;
        $element['#name'] = array_shift($parents_copy);
        if (count($parents_copy)) {
          $element['#name'] .= '['. implode('][', $parents_copy) .']';
        }
    }
    $element['#parents'] = $element['#array_parents'] = $parents;
    //Force rerendering
    unset( $element['#printed'], $element['#value'], $element['#children']);
    foreach ( element_children( $element ) as $key ) {
        _drupal_force_child_render_cb( $element[$key], $parents, $key );
    }

}

/**
 * Theme function to format the output of tablegrid form element type.
 *
 */
function theme_linked(  $element ){
  static $configs = array(  );

    $config = $element['#linked'];
    $config_key = array_search( $config, $configs );
    if ( $config_key === FALSE ) {
        $configs[] = $config;
        $config_key = count( $configs ) - 1;
        drupal_add_js( array( 'linkedinput'=>array( $config_key=>$config ) ), 'setting' );
    }

    jquery_livequery_js_load(  );
    linkeditem_js_load(  );
    $output = '';

    $output .= '<div class="linked-input" rel="' . $config_key . '">';
    if (isset($element['#field_prefix'])) {
        $output .= '<span class="field-prefix">'. $element['#field_prefix'] .'</span>';
    }
    
    //Generate child elements, disabled, with same name as parent, and class containing name
    foreach ( element_children( $element ) as $item_key ) {
         $item = $element[$item_key];
         unset( $item['#printed'], $item['#value']);
         $item['#name'] = $element['#name'];
         $item['#id'] = form_clean_id('edit-'. $item['#name'] . 'inner' );
         $item['#default_value'] = $element['#default_value'];
         _drupal_force_child_render_cb( $item, $element['#parents'] );
         $html =  drupal_render($item);
         $children .= '<div class="edit-' . $item_key. '-wrapper">' . $html . '</div>';
    }
    
    $output .= '<div class="hiddenFields"> ' . $children . '</div>';

    if (isset($element['#field_suffix'])) {
        $output .= ' <span class="field-suffix">'. $element['#field_suffix'] .'</span>';
    }

    $output .= '</div>';
    


  $out = theme('form_element', $element, $output);
  return $out;
}

function form_type_linked_value($element, $edit = FALSE) {
   if (func_num_args() == 1) {
        return $element['#default_value'];
   }

   return $edit;
}
